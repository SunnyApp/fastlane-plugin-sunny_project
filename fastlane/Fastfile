# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
# Uncomment the line if you want fastlane to automatically update itself

fastlane_require 'semantic'
fastlane_require 'semantic/core_ext'
require 'fastlane'
fastlane_require 'fileutils'
fastlane_require 'open3'

p $VERBOSE

lane :publish do |options|
  cmd('flutter test', 'flutter test')
  old_version = current_semver_path

  ## If we're not going to build, we don't need to update
  # version numbers.
  if options[:build] and not options[:noBump]
    if options[:release]
      build_number = increase_version build:true, patch:true
    else
      build_number = increase_version build:true
    end

    unless build_number
      UI.user_error! "Version incrementing failed"
      next
    end
  end

  # Whatever happened with the incrementing, this is the build number we're
  # going with
  version = current_semver_path
  changes = release_notes(options[:changes])
  puts(changes)

  # If we got this far, let's commit the build number and update the git tags.  If the rest of the pro
  # process fails, we should revert this because it will mess up our commit logs
  git_commit(path: %w[./pubspec.yaml ./pubspec.lock],
             message: "Version bump to: #{version.major}.#{version.minor}.#{version.patch}#800#{version.build}")
  add_git_tag(
      grouping: "trippi-builds",
      prefix: "v",
      force: true,
      build_number: version.build
  )
  push_git_tags

end



def release_notes(changes)
  unless changes
    if not changes and File.file?(release_notes_file)
      changes = File.read(release_notes_file)
      UI.message "Found release notes: \n#####################################################\n\n#{changes}\n\n#####################################################\n"
      sleep(5)
      return changes
    end
    if not File.file?(release_notes_file)
      changes = changelog_from_git_commits
      unless changes
        changes = prompt(
            text: "Please Enter a description of what changed.\nWhen you are finished, type END\n Changelog: ",
            multi_line_end_keyword: 'END')
      end
    end
    if changes
      File.open(release_notes_file, 'w') { |file|
        file.write(changes)
      }
    end
    if File.file?(release_notes_file)
      changes = File.read(release_notes_file)
    end
  end
  changes
end


def cmd(name, *command, **args)
  if (command.count > 1)
    command = command.map { |item| Shellwords.escape item }
  end
  joined = command.join(" ")
  if args[:verbose]
    begin
      return sh(command)
    rescue StandardError => e
      UI.user_error! ">> #{name} failed << \n  #{e}"
    end
  else
    if args[:cmd_out]
      UI.command_output name
    else
      UI.command name
    end

    stdout, err, status = Open3.capture3(joined)
    UI.user_error! ">> #{name} failed << \n  command: #{joined}\n  error: #{err}" unless status == 0
    stdout
  end
end

lane :ximg do |options|
  Dir.chdir("..") {
    cmd("dart asset_renamer.dart", "dart tools/asset_renamer.dart")
  }
end

lane :icons do
  download_icons
  build_icon_fonts
end

lane :build_icon_fonts do
  Dir.chdir("..") {
    cmd("Generate flutter icons", "icon_font_generator", "--from=iconsource/svg", "--class-name=AuthIcons",
        "--out-font=lib/fonts/AuthIcons.ttf", "--out-flutter=lib/auth_icon_font.dart", "--normalize")
  }
end

lane :download_icons do
  Dir.chdir("..") {
    cmd("Download icons", "dart", "tools/iconsource/downloader.dart")
  }
end

def underscore(str)
  str.gsub(/::/, '/').
      gsub(/([A-Z]+)([A-Z][a-z])/, '\1_\2').
      gsub(/([a-z\d])([A-Z])/, '\1_\2').
      tr("-", "_").
      downcase
end
